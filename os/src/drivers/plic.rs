#![allow(dead_code)]

use crate::platform::PLIC_BASE_ADDR;
const PLIC_PRIORITY_OFFSET: usize = 0x0;
const PLIC_PRIORITY_STRIDE: usize = 0x4;
const PLIC_IP_OFFSET: usize = 0x1000;
const PLIC_IE_OFFSET: usize = 0x2000;
const PLIC_IE_STRIDE_PER_TARGET: usize = 0x80;
const PLIC_THRESHOLD_OFFSET: usize = 0x20_0000;
const PLIC_THRESHOLD_STRIDE_PER_TARGET: usize = 0x1000;
const PLIC_CLAIM_COMPLETE_OFFSET: usize = 0x20_0004;

pub enum PLIC_INTR_SOURCE
{
    IRQN_NO_INTERRUPT        = 0,
    IRQN_SPI0_INTERRUPT      = 1,
    IRQN_SPI1_INTERRUPT      = 2,
    IRQN_SPI_SLAVE_INTERRUPT = 3,
    IRQN_SPI3_INTERRUPT      = 4,
    IRQN_I2S0_INTERRUPT      = 5,
    IRQN_I2S1_INTERRUPT      = 6,
    IRQN_I2S2_INTERRUPT      = 7,
    IRQN_I2C0_INTERRUPT      = 8,
    IRQN_I2C1_INTERRUPT      = 9,
    IRQN_I2C2_INTERRUPT      = 10,
    IRQN_UART1_INTERRUPT     = 11,
    IRQN_UART2_INTERRUPT     = 12,
    IRQN_UART3_INTERRUPT     = 13,
    IRQN_TIMER0A_INTERRUPT   = 14,
    IRQN_TIMER0B_INTERRUPT   = 15,
    IRQN_TIMER1A_INTERRUPT   = 16,
    IRQN_TIMER1B_INTERRUPT   = 17,
    IRQN_TIMER2A_INTERRUPT   = 18,
    IRQN_TIMER2B_INTERRUPT   = 19,
    IRQN_RTC_INTERRUPT       = 20,
    IRQN_WDT0_INTERRUPT      = 21,
    IRQN_WDT1_INTERRUPT      = 22,
    IRQN_APB_GPIO_INTERRUPT  = 23,
    IRQN_DVP_INTERRUPT       = 24,
    IRQN_AI_INTERRUPT        = 25,
    IRQN_FFT_INTERRUPT       = 26,
    IRQN_DMA0_INTERRUPT      = 27,
    IRQN_DMA1_INTERRUPT      = 28,
    IRQN_DMA2_INTERRUPT      = 29,
    IRQN_DMA3_INTERRUPT      = 30,
    IRQN_DMA4_INTERRUPT      = 31,
    IRQN_DMA5_INTERRUPT      = 32,
    IRQN_UARTHS_INTERRUPT    = 33,
    IRQN_GPIOHS0_INTERRUPT   = 34,
    IRQN_GPIOHS1_INTERRUPT   = 35,
    IRQN_GPIOHS2_INTERRUPT   = 36,
    IRQN_GPIOHS3_INTERRUPT   = 37,
    IRQN_GPIOHS4_INTERRUPT   = 38,
    IRQN_GPIOHS5_INTERRUPT   = 39,
    IRQN_GPIOHS6_INTERRUPT   = 40,
    IRQN_GPIOHS7_INTERRUPT   = 41,
    IRQN_GPIOHS8_INTERRUPT   = 42,
    IRQN_GPIOHS9_INTERRUPT   = 43,
    IRQN_GPIOHS10_INTERRUPT  = 44,
    IRQN_GPIOHS11_INTERRUPT  = 45,
    IRQN_GPIOHS12_INTERRUPT  = 46,
    IRQN_GPIOHS13_INTERRUPT  = 47,
    IRQN_GPIOHS14_INTERRUPT  = 48,
    IRQN_GPIOHS15_INTERRUPT  = 49,
    IRQN_GPIOHS16_INTERRUPT  = 50,
    IRQN_GPIOHS17_INTERRUPT  = 51,
    IRQN_GPIOHS18_INTERRUPT  = 52,
    IRQN_GPIOHS19_INTERRUPT  = 53,
    IRQN_GPIOHS20_INTERRUPT  = 54,
    IRQN_GPIOHS21_INTERRUPT  = 55,
    IRQN_GPIOHS22_INTERRUPT  = 56,
    IRQN_GPIOHS23_INTERRUPT  = 57,
    IRQN_GPIOHS24_INTERRUPT  = 58,
    IRQN_GPIOHS25_INTERRUPT  = 59,
    IRQN_GPIOHS26_INTERRUPT  = 60,
    IRQN_GPIOHS27_INTERRUPT  = 61,
    IRQN_GPIOHS28_INTERRUPT  = 62,
    IRQN_GPIOHS29_INTERRUPT  = 63,
    IRQN_GPIOHS30_INTERRUPT  = 64,
    IRQN_GPIOHS31_INTERRUPT  = 65,
    IRQN_MAX
}

pub enum PLIC_TARGET {
    HART0_M_INTR,
    HART0_S_INTR,
    HART1_M_INTR,
    HART1_S_INTR
}

fn get_target_threshold_ptr(target: PLIC_TARGET) -> *mut u32 {
    let mut addr = PLIC_BASE_ADDR;
    addr += PLIC_THRESHOLD_OFFSET;
    addr += PLIC_THRESHOLD_STRIDE_PER_TARGET * (target as usize);
    addr as *mut u32
}

fn get_intr_source_priority_ptr(source: PLIC_INTR_SOURCE) -> *mut u32 {
    let mut addr = PLIC_BASE_ADDR;
    addr += PLIC_PRIORITY_OFFSET;
    addr += PLIC_PRIORITY_STRIDE * (source as usize);
    addr as *mut u32
}

pub fn init() {
    let hart0_m_threshold = get_target_threshold_ptr(PLIC_TARGET::HART0_M_INTR);
    let hart1_m_threshold = get_target_threshold_ptr(PLIC_TARGET::HART1_M_INTR);
    unsafe {
        hart0_m_threshold.write_volatile(0);
        hart1_m_threshold.write_volatile(1);
    }
}